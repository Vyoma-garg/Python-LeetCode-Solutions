class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        map={}
        max_length=start=0
        for r in range(len(s)):
            if s[r] in map and start<=map[s[r]]:
                start=map[s[r]]+1
            else:
                max_length=max(max_length, r-start+1)
            map[s[r]]=r
        return max_length
        
        
        #USING Sets----------------------
        x = set()
        left = 0
        right = 0
        res = 0

        while right < len(s):
            if s[right] not in x:
                x.add(s[right])
                right += 1
                res = max(res, len(x))
            else:
                x.remove(s[left])
                left += 1

        return res
        
       #Using dict-----------------------

        x = {}
        left = 0
        right = 0
        res = 0

        while right < len(s):
            if s[right] not in x:
                x[s[right]]=right
                right += 1
                res = max(res, len(x))
            else:
                del x[s[left]]

                #x.remove()
                left += 1

        return res

