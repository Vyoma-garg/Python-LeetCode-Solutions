# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode:
        ptr1=head
        #len=0
        if head==None:
            return None
        #len=1
        if head.next==None:
                return None
        #len=2   
        if head.next.next==None and n==1:
            head.next=None
            return head
           
        if head.next.next==None and n==2:
            return head.next
        #len=3
        if head.next.next.next==None and n==1:
            head.next.next=None
            return head
        
        if head.next.next.next==None and n==2:
            head.next=head.next.next
            return head 
        
        if head.next.next.next==None and n==3:
            return head.next
        
        
        length=0
        while(ptr1!=None):
            length+=1
            ptr1=ptr1.next
        
        ptr1=head
        #len>3
        if length==n:
            return head.next

        for i in range(length-n-1):
            ptr1=ptr1.next
        
        ptr1.next=ptr1.next.next
        
        return head
        
 #BETTER SOLUTION1 ---------------------------------------------------
         #len=1
        #current= p=head
        #while current.next:
        #    len+=1
        #    current=current.next
        #    if len>n+1:
        #        p=p.next
        
       # if len==n:
        #    return head.next
        #else:
         #   p.next=p.next.next
         #   return head
        
#BETTER SOLUTION 2-----------------------------------------------------       
        fast = head
        for i in range(n):
            if not fast:
                return head
            fast = fast.next
        
        if not fast: 
            return head.next
        
        previous = head
        fast = fast.next
        
        while fast:
            previous = previous.next
            fast = fast.next
            
        previous.next = previous.next.next
        return head
 
